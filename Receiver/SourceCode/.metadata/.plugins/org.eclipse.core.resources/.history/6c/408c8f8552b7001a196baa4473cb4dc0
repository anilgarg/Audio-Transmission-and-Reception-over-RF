/***********************************************************************************************************
 * File Name       : rfEasyLinkRx_nortos.c
 * Created on      : 1-May-2020
 * Author          : AG
 * Last Modified    :
 * Version History :
 * V0.1              : Initial Implementation
 ***********************************************************************************************************/

/*
 *  ======== rfEasyLinkRx_nortos.c ========
 */
/* Application header files */
#include "smartrf_settings/smartrf_settings.h"
#include "Board.h"
#include "SPI.h"
/* Standard C Libraries */
#include <stdbool.h>
#include <stdint.h>

/* TI Drivers */
#include <ti/drivers/pin/PINCC26XX.h>
#include <ti/drivers/Power.h>
#include <ti/drivers/rf/RF.h>
#include <ti/drivers/timer/GPTimerCC26XX.h>
#include <ti/devices/DeviceFamily.h>

/* Driverlib APIs */
#include DeviceFamily_constructPath(driverlib/sys_ctrl.h)


/* EasyLink API Header files */
#include "easylink/EasyLink.h"

/* Undefine to remove async mode */
#define RFEASYLINKRX_ASYNC
    #define b0  1000
    #define b1  -1999
    #define b2  1000
    #define a1  -1980
    #define a2  986
    #define gain 993

/***** Defines global variable and function *****/
int16_t  int16_prevSample = 0,int16_prevSampleForRF = 0,counter =0;
unsigned short int temp = 0x7fff, Timer_counter = 0,SendDataToDACTrigger =0;
signed short int temp_count = 0;
unsigned char TxBufferToDACSampleCounter = 0,RxBufferCounter =0;

unsigned int uisampleVal = 0;
extern void ADPCMDecoder(uint8_t * p_ui8_inputsample,uint16_t * p_ui16_outsample,uint16_t prevSample, uint8_t buffer_size);
extern void init_adpcm(void);
unsigned int IIR_Filter(unsigned int uins);
/* Pin driver handle */
static PIN_Handle pinHandle;
static PIN_State pinState;

/*
 * Application LED pin configuration table:
 *   - All LEDs board LEDs are off.
 */
PIN_Config pinTable[] = {
    Board_PIN_LED1 | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX,
    Board_PIN_LED2 | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX,
    PIN_TERMINATE
};


#ifdef RFEASYLINKRX_ASYNC
/* GPTimer handle and timeout value */
GPTimerCC26XX_Handle hTimer;
GPTimerCC26XX_Value rxTimeoutVal;

/* GP Timer Callback */
void rxTimeoutCb(GPTimerCC26XX_Handle handle,
                 GPTimerCC26XX_IntMask interruptMask);

static volatile bool rxDoneFlag;
static volatile bool rxTimeoutFlag;
#endif


/**********SPI Definition****************************/
SPI_Handle SPI_open(uint_least8_t index, SPI_Params *params);
void SPI_FN(void);
void SPI_SEND_TO_DMA( uint16_t data );
SPI_Handle      spiHandle;
SPI_Params      spiParams;
SPI_Transaction transaction;
extern unsigned short int TxBufferToDAC[100];
/**************************************/


/***** Function definitions *****/
#ifdef RFEASYLINKRX_ASYNC


/**************************************************************************************************/
/* Function Name : rxDoneCb                                                  */
/* Description   : RF receiver callback
* This function is called whenever RF data is received
*  main Function: data parsing and adpcm decoding */
/* Parameters    : EasyLink_RxPacket ,EasyLink_Status*/
/* Return        : void                                                                           */
/*                                                                                                */
/**************************************************************************************************/
void rxDoneCb(EasyLink_RxPacket * rxPacket, EasyLink_Status status)
{
    if (status == EasyLink_Status_Success)
    {
        /* Toggle LED2 to indicate RX */
        PIN_setOutputValue(pinHandle, Board_PIN_LED2,!PIN_getOutputValue(Board_PIN_LED2));

        /* data parsing of RF received payload */
         /* parsing of adpcm initialization values */
        int16_prevSampleForRF = rxPacket->payload[53]; // Previous sample
        int16_prevSampleForRF = (int16_prevSampleForRF<<8) + rxPacket->payload[52]; // append with step index

        ADPCMDecoder(&rxPacket->payload[2],&TxBufferToDAC[0],int16_prevSampleForRF, 100 ); // calling adpcm decoder


        TxBufferToDACSampleCounter =0; // index for DAC sampling
        SendDataToDACTrigger = 1;     // trigger the SPI for sending data to DAC
    }
    else if(status == EasyLink_Status_Aborted)
    {
        /* Toggle LED1 to indicate command aborted */
        PIN_setOutputValue(pinHandle, Board_PIN_LED1,!PIN_getOutputValue(Board_PIN_LED1));
    }
    else
    {
        /* Toggle LED1 and LED2 to indicate error */
        PIN_setOutputValue(pinHandle, Board_PIN_LED1,!PIN_getOutputValue(Board_PIN_LED1));
        PIN_setOutputValue(pinHandle, Board_PIN_LED2,!PIN_getOutputValue(Board_PIN_LED2));
    }

    rxDoneFlag = true;
}
#endif //RFEASYLINKRX_ASYNC

void *mainThread(void *arg0)
{

    /* Open LED pins */
    pinHandle = PIN_open(&pinState, pinTable);
    if (pinHandle == NULL)
    {
        while(1);
    }

    /* Clear LED pins */
    PIN_setOutputValue(pinHandle, Board_PIN_LED1, 0);
    PIN_setOutputValue(pinHandle, Board_PIN_LED2, 0);

#ifdef RFEASYLINKRX_ASYNC
    /* Reset the timeout flag */
    rxTimeoutFlag = false;
    /* Set the reception flag to its default state */
    rxDoneFlag = false;

    /* Open the GPTimer driver */
    GPTimerCC26XX_Params params;
    GPTimerCC26XX_Params_init(&params);
    params.width          = GPT_CONFIG_32BIT;
    params.mode           = GPT_MODE_ONESHOT;
    params.direction      = GPTimerCC26XX_DIRECTION_UP;
    params.debugStallMode = GPTimerCC26XX_DEBUG_STALL_OFF;
    hTimer = GPTimerCC26XX_open(Board_GPTIMER0A, &params);
    if(hTimer == NULL)
    {
        while(1);
    }

    /* Set Timeout value to 300ms */
   // rxTimeoutVal = (SysCtrlClockGet()*3UL)/10UL - 1UL;
    rxTimeoutVal = 5850; // 125usec
    GPTimerCC26XX_setLoadValue(hTimer, rxTimeoutVal);


    /* Register the GPTimer interrupt */
    GPTimerCC26XX_registerInterrupt(hTimer, rxTimeoutCb, GPT_INT_TIMEOUT);
#else
    // Create an RX packet
    EasyLink_RxPacket rxPacket = {0};
#endif //RFEASYLINKRX_ASYNC

    // Initialize the EasyLink parameters to their default values
    EasyLink_Params easyLink_params;
    EasyLink_Params_init(&easyLink_params);

    /*
     * Initialize EasyLink with the settings found in easylink_config.h
     * Modify EASYLINK_PARAM_CONFIG in easylink_config.h to change the default
     * PHY
     */
    if (EasyLink_init(&easyLink_params) != EasyLink_Status_Success){
        while(1);
    }

    /*
     * If you wish to use a frequency other than the default, use
     * the following API:
     * EasyLink_setFrequency(868000000);
     */

    /* SPI function initialization*/
    SPI_FN();

    /* Timer start*/
    GPTimerCC26XX_start(hTimer);

    /* ADPCM function initialization*/
    init_adpcm();

    while(1) {

        // Set the Receive done flag to false, callback will
        // set it to true
        rxDoneFlag = false;

        // Wait to receive a packet
        EasyLink_receiveAsync(rxDoneCb, 0);

        /*
         * Start the Receiver timeout timer (300ms) before
         * EasyLink_receiveAsync enables the power policy
         */
     //    // reset counter for Timeout of 150 msec
        Timer_counter = 0;

        while(rxDoneFlag == false){

            /* Break if timeout flag is set */
            if(rxTimeoutFlag == true){
                /* Reset the timeout flag */
                rxTimeoutFlag = false;
                /* RX timed out, abort */
                if(EasyLink_abort() == EasyLink_Status_Success)
                {
                    /* Wait for the abort */
                    while(rxDoneFlag == false){};
                }
                break;
            }
        }
    }
}


/* GP Timer Callback Function */
void rxTimeoutCb(GPTimerCC26XX_Handle handle,
                 GPTimerCC26XX_IntMask interruptMask)
{
    /*
       * Timer is automatically stopped in one-shot mode and needs to be reset by
       * loading the interval load value
       */
      GPTimerCC26XX_setLoadValue(hTimer, rxTimeoutVal);
      GPTimerCC26XX_start(hTimer);

    Timer_counter ++;

    if(Timer_counter >= 1200) // Timeout of 150 msec
    {
        Timer_counter = 0;
        /* Set the Timeout Flag */
        rxTimeoutFlag = true;
    }
    if(SendDataToDACTrigger ==1) // send data sample to DAC
    {
        uisampleVal = IIR_Filter(TxBufferToDAC[TxBufferToDACSampleCounter]);
        SPI_SEND_TO_DMA((uisampleVal) | 0x7000);
        TxBufferToDACSampleCounter++;
        if(TxBufferToDACSampleCounter >= 100)
        {
        TxBufferToDACSampleCounter = 0;
          SendDataToDACTrigger = 0;
        }
    }

}


unsigned int IIR_Filter(unsigned int uins)
{
    static long nsm1 = 0, nsm2= 0, ysn = 0 , ysnm1 = 0 , ysnm2 = 0;
  //  float b0,b1,b2,a1,a2;
    ysn = b0*(long)uins + b1*nsm1 + b2*nsm2 -a1*ysnm1 - a2*ysnm2;
    ysn = (ysn*gain)/1000000;

    nsm2 = nsm1;
    nsm1 = uins;
    ysnm2 = ysnm1;
    ysnm1 = ysn;

    return (unsigned int)(ysn);

}

void SPI_FN(void)
{
    /* INITIALIZATION OF SPI PARAMS */
    SPI_init();

     SPI_Params_init(&spiParams);
     spiParams.frameFormat = SPI_POL0_PHA0;                 // AFE4300 uses POL0_PHA1 as mode: idle state of SCLK is LOW, Data is changed on rising edge and sampled on falling edge
     spiParams.mode = SPI_MASTER;                           // CC1310 is transmitting as master
     spiParams.transferMode = SPI_MODE_BLOCKING;            // blocking mode: we only use one thread, so callback function would only cause unnecessary overhead
     spiParams.bitRate = 1000000;                           // supported bit rate by AFE4300: <= 4MHz
     spiParams.dataSize = 16;
     spiHandle = SPI_open(Board_SPI_MASTER, &spiParams);

}

void SPI_SEND_TO_DMA( uint16_t  data )
{
    uint16_t rxBuf[2];
    uint16_t txBuf[2];

    /* sample copy in spi buffer*/
    txBuf[0] = data;

    bool            transferOK = false;
    SPI_Status      transactionStatus;
    transaction.count = 1;
    transaction.txBuf = (void *) txBuf;
    transaction.rxBuf = (void *) rxBuf;

    transferOK = SPI_transfer(spiHandle, &transaction);
    transactionStatus = transaction.status;
}
